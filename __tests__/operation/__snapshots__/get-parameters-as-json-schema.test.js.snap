// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`$ref quirks should retain $ref pointers in the schema even if they're circular 1`] = `
Array [
  Object {
    "label": "Headers",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "ProductStock": Object {
            "properties": Object {
              "test_param": Object {
                "items": Object {
                  "$ref": "#/components/schemas/SalesLine",
                },
                "type": "array",
              },
            },
            "type": "object",
            "x-readme-ref-name": "ProductStock",
          },
          "SalesLine": Object {
            "properties": Object {
              "stock": Object {
                "$ref": "#/components/schemas/ProductStock",
              },
            },
            "type": "object",
            "x-readme-ref-name": "SalesLine",
          },
          "dateTime": Object {
            "format": "date-time",
            "type": "string",
            "x-readme-ref-name": "dateTime",
          },
          "offset": Object {
            "properties": Object {
              "id": Object {
                "type": "string",
              },
              "rules": Object {
                "$ref": "#/components/schemas/rules",
              },
            },
            "type": "object",
            "x-readme-ref-name": "offset",
          },
          "offsetTransition": Object {
            "properties": Object {
              "dateTime": Object {
                "format": "date-time",
                "type": "string",
              },
              "offsetAfter": Object {
                "$ref": "#/components/schemas/offset",
              },
              "offsetBefore": Object {
                "$ref": "#/components/schemas/offset",
              },
            },
            "type": "object",
            "x-readme-ref-name": "offsetTransition",
          },
          "rules": Object {
            "properties": Object {
              "transitions": Object {
                "items": Object {
                  "$ref": "#/components/schemas/offsetTransition",
                },
                "type": "array",
              },
            },
            "type": "object",
            "x-readme-ref-name": "rules",
          },
        },
      },
      "properties": Object {
        "content": Object {
          "items": Object {
            "$ref": "#/components/schemas/SalesLine",
          },
          "type": "array",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`parameters should convert parameters to JSON schema 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "petId": Object {
          "description": "Pet id to delete",
          "format": "int64",
          "type": "integer",
        },
      },
      "required": Array [
        "petId",
      ],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "api_key": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`polymorphism / discriminators should retain discriminator \`mapping\` refs when present 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "OptionOneNoDisc": Object {
            "properties": Object {
              "discrim": Object {
                "type": "string",
              },
              "optionone": Object {
                "type": "number",
              },
            },
            "required": Array [
              "discrim",
            ],
            "type": "object",
            "x-readme-ref-name": "OptionOneNoDisc",
          },
          "OptionTwoNoDisc": Object {
            "properties": Object {
              "discrim": Object {
                "type": "string",
              },
              "optiontwo": Object {
                "type": "string",
              },
            },
            "required": Array [
              "discrim",
            ],
            "type": "object",
            "x-readme-ref-name": "OptionTwoNoDisc",
          },
        },
      },
      "discriminator": Object {
        "mapping": Object {
          "Option One": "#/components/schemas/OptionOneNoDisc",
          "Option Two": "#/components/schemas/OptionTwoNoDisc",
        },
        "propertyName": "discrim",
      },
      "oneOf": Array [
        Object {
          "properties": Object {
            "discrim": Object {
              "type": "string",
            },
            "optionone": Object {
              "type": "number",
            },
          },
          "required": Array [
            "discrim",
          ],
          "type": "object",
          "x-readme-ref-name": "OptionOneNoDisc",
        },
        Object {
          "properties": Object {
            "discrim": Object {
              "type": "string",
            },
            "optiontwo": Object {
              "type": "string",
            },
          },
          "required": Array [
            "discrim",
          ],
          "type": "object",
          "x-readme-ref-name": "OptionTwoNoDisc",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`request bodies should convert request bodies to JSON schema (application/json) 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "category": Object {
          "properties": Object {
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "name": Object {
              "type": "string",
            },
          },
          "type": "object",
          "x-readme-ref-name": "Category",
        },
        "id": Object {
          "format": "int64",
          "readOnly": true,
          "type": "integer",
        },
        "name": Object {
          "examples": Array [
            "doggie",
          ],
          "type": "string",
        },
        "photoUrls": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "status": Object {
          "description": "pet status in the store",
          "enum": Array [
            "available",
            "pending",
            "sold",
          ],
          "type": "string",
        },
        "tags": Object {
          "items": Object {
            "properties": Object {
              "id": Object {
                "format": "int64",
                "type": "integer",
              },
              "name": Object {
                "type": "string",
              },
            },
            "type": "object",
            "x-readme-ref-name": "Tag",
          },
          "type": "array",
        },
      },
      "required": Array [
        "name",
        "photoUrls",
      ],
      "type": "object",
      "x-readme-ref-name": "Pet",
    },
    "type": "body",
  },
]
`;

exports[`request bodies should convert request bodies to JSON schema (application/x-www-form-urlencoded) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "petId": Object {
          "description": "ID of pet that needs to be updated",
          "format": "int64",
          "type": "integer",
        },
      },
      "required": Array [
        "petId",
      ],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Form Data",
    "schema": Object {
      "properties": Object {
        "name": Object {
          "description": "Updated name of the pet",
          "type": "string",
        },
        "status": Object {
          "description": "Updated status of the pet",
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "formData",
  },
]
`;

exports[`type sorting should return with a json schema for each parameter type (body instead of formData) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`type sorting should return with a json schema for each parameter type (formData instead of body) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Form Data",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "formData",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;
