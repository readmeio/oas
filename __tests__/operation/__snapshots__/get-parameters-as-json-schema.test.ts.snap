// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`$ref quirks > should retain $ref pointers in the schema even if they're circular 1`] = `
[
  {
    "label": "Headers",
    "schema": {
      "components": {
        "schemas": {
          "ProductStock": {
            "properties": {
              "test_param": {
                "items": {
                  "$ref": "#/components/schemas/SalesLine",
                },
                "type": "array",
              },
            },
            "type": "object",
            "x-readme-ref-name": "ProductStock",
          },
          "SalesLine": {
            "properties": {
              "stock": {
                "$ref": "#/components/schemas/ProductStock",
              },
            },
            "type": "object",
            "x-readme-ref-name": "SalesLine",
          },
          "dateTime": {
            "format": "date-time",
            "type": "string",
            "x-readme-ref-name": "dateTime",
          },
          "offset": {
            "properties": {
              "id": {
                "type": "string",
              },
              "rules": {
                "$ref": "#/components/schemas/rules",
              },
            },
            "type": "object",
            "x-readme-ref-name": "offset",
          },
          "offsetTransition": {
            "properties": {
              "dateTime": {
                "format": "date-time",
                "type": "string",
              },
              "offsetAfter": {
                "$ref": "#/components/schemas/offset",
              },
              "offsetBefore": {
                "$ref": "#/components/schemas/offset",
              },
            },
            "type": "object",
            "x-readme-ref-name": "offsetTransition",
          },
          "rules": {
            "properties": {
              "transitions": {
                "items": {
                  "$ref": "#/components/schemas/offsetTransition",
                },
                "type": "array",
              },
            },
            "type": "object",
            "x-readme-ref-name": "rules",
          },
        },
      },
      "properties": {
        "content": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "items": {
            "$ref": "#/components/schemas/SalesLine",
          },
          "type": "array",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`deprecated > parameters > should create deprecatedProps from body and metadata parameters 1`] = `
[
  {
    "deprecatedProps": {
      "schema": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "properties": {
          "filterLegacy": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "deprecated": true,
            "description": "This query parameter is deprecated.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#parameter-object",
            "enum": [
              "active",
              "inactive",
            ],
            "type": "string",
          },
        },
        "required": [
          "status",
        ],
        "type": "object",
      },
      "type": "query",
    },
    "label": "Query Params",
    "schema": {
      "properties": {
        "filter": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "description": "This query parameter is explicitly **not** deprecated.",
          "enum": [
            "active",
            "inactive",
          ],
          "type": "string",
        },
        "status": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "deprecated": true,
          "items": {
            "default": "available",
            "deprecated": true,
            "description": "Default: available",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "type": "array",
        },
      },
      "required": [
        "status",
      ],
      "type": "object",
    },
    "type": "query",
  },
  {
    "deprecatedProps": {
      "schema": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "properties": {
          "category_alt": {
            "deprecated": true,
            "description": "Though this loads a \`$ref\` to the \`Category\` schema, and that contains deprecated properties within itself, this \`category_alt\` parameter is also deprecated.",
            "properties": {
              "id": {
                "deprecated": true,
                "format": "int64",
                "maximum": 9223372036854776000,
                "minimum": -9223372036854776000,
                "type": "integer",
              },
              "name": {
                "deprecated": true,
                "type": "string",
              },
            },
            "type": "object",
            "x-readme-ref-name": "Category",
          },
          "id": {
            "default": 40,
            "deprecated": true,
            "description": "This \`requestBody\` schema property is marked as deprecated.

https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object",
            "examples": [
              25,
            ],
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer",
          },
          "status": {
            "deprecated": true,
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
            "x-readme-ref-name": "Status",
          },
          "tags": {
            "deprecated": true,
            "items": {
              "properties": {
                "id": {
                  "format": "int64",
                  "maximum": 9223372036854776000,
                  "minimum": -9223372036854776000,
                  "type": "integer",
                },
                "name": {
                  "type": "string",
                },
              },
              "type": "object",
              "x-readme-ref-name": "Tag",
            },
            "type": "array",
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "x-readme-ref-name": "Pet",
      },
      "type": "body",
    },
    "description": "Pet object that needs to be added to the store",
    "label": "Body Params",
    "schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "properties": {
        "category": {
          "properties": {
            "id": {
              "deprecated": true,
              "format": "int64",
              "maximum": 9223372036854776000,
              "minimum": -9223372036854776000,
              "type": "integer",
            },
            "name": {
              "deprecated": true,
              "type": "string",
            },
          },
          "type": "object",
          "x-readme-ref-name": "Category",
        },
        "name": {
          "deprecated": true,
          "examples": [
            "doggie",
          ],
          "type": "string",
        },
        "photoUrls": {
          "deprecated": true,
          "items": {
            "deprecated": true,
            "examples": [
              "https://example.com/photo.png",
            ],
            "type": "string",
          },
          "type": "array",
        },
        "polymorphism": {
          "properties": {
            "allOf": {
              "deprecated": true,
              "description": "This is a \`allOf\` that's marked as deprecated.",
              "properties": {
                "status": {
                  "deprecated": true,
                  "description": "pet status in the store",
                  "enum": [
                    "available",
                    "pending",
                    "sold",
                  ],
                  "type": "string",
                  "x-readme-ref-name": "Status",
                },
              },
              "type": "object",
              "x-readme-ref-name": "StatusWrapper",
            },
            "anyOf": {
              "anyOf": [
                {
                  "properties": {
                    "status": {
                      "deprecated": true,
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold",
                      ],
                      "type": "string",
                      "x-readme-ref-name": "Status",
                    },
                  },
                  "title": "option 1",
                  "type": "object",
                  "x-readme-ref-name": "StatusWrapper",
                },
                {
                  "properties": {
                    "status": {
                      "deprecated": true,
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold",
                      ],
                      "type": "string",
                      "x-readme-ref-name": "Status",
                    },
                  },
                  "title": "option 2",
                  "type": "object",
                  "x-readme-ref-name": "StatusWrapper",
                },
              ],
              "deprecated": true,
              "description": "This is a \`anyOf\` that's marked as deprecated.",
            },
            "oneOf": {
              "deprecated": true,
              "description": "This is a \`oneOf\` that's marked as deprecated.",
              "oneOf": [
                {
                  "properties": {
                    "status": {
                      "deprecated": true,
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold",
                      ],
                      "type": "string",
                      "x-readme-ref-name": "Status",
                    },
                  },
                  "title": "option 1",
                  "type": "object",
                  "x-readme-ref-name": "StatusWrapper",
                },
                {
                  "properties": {
                    "status": {
                      "deprecated": true,
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold",
                      ],
                      "type": "string",
                      "x-readme-ref-name": "Status",
                    },
                  },
                  "title": "option 2",
                  "type": "object",
                  "x-readme-ref-name": "StatusWrapper",
                },
              ],
            },
          },
          "type": "object",
        },
        "tags_alt": {
          "description": "Unlike the \`tags\` parameter, this is **not** deprecated, but the contents within itself are.",
          "items": {
            "properties": {
              "id": {
                "deprecated": true,
                "format": "int64",
                "maximum": 9223372036854776000,
                "minimum": -9223372036854776000,
                "type": "integer",
              },
              "name": {
                "deprecated": true,
                "type": "string",
              },
            },
            "type": "object",
            "x-readme-ref-name": "Tag_deprecated",
          },
          "type": "array",
        },
      },
      "required": [
        "name",
        "photoUrls",
      ],
      "type": "object",
      "x-readme-ref-name": "Pet",
    },
    "type": "body",
  },
]
`;

exports[`deprecated > polymorphism > should be able to merge enums within an allOf schema 1`] = `
[
  {
    "label": "Body Params",
    "schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "properties": {
        "events": {
          "items": {
            "enum": [
              "one",
              "two",
              "three",
              "four",
              "five",
              "six",
            ],
            "type": "string",
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true,
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`deprecated > polymorphism > should pass through deprecated on a (merged) allOf schema 1`] = `
[
  {
    "deprecatedProps": {
      "schema": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "properties": {
          "messages": {
            "deprecated": true,
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "type": "body",
    },
    "label": "Body Params",
    "schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "properties": {
        "uri": {
          "format": "uri",
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`options > mergeIntoBodyAndMetadata > retainDeprecatedProperties (default behavior) > should support merging \`deprecatedProps\` together 1`] = `
[
  {
    "deprecatedProps": {
      "schema": {
        "allOf": [
          {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
              "Accept": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "deprecated": true,
                "type": "string",
              },
            },
            "required": [],
            "type": "object",
          },
        ],
      },
      "type": "metadata",
    },
    "label": "Metadata",
    "schema": {
      "allOf": [
        {
          "properties": {},
          "required": [],
          "type": "object",
        },
      ],
    },
    "type": "metadata",
  },
]
`;

exports[`options > mergeIntoBodyAndMetadata > should merge params categorized as metadata into a single block 1`] = `
[
  {
    "label": "Metadata",
    "schema": {
      "allOf": [
        {
          "properties": {
            "petId": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "Pet id to delete",
              "format": "int64",
              "maximum": 9223372036854776000,
              "minimum": -9223372036854776000,
              "type": "integer",
            },
          },
          "required": [
            "petId",
          ],
          "type": "object",
        },
        {
          "properties": {
            "api_key": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "type": "string",
            },
          },
          "required": [],
          "type": "object",
        },
      ],
    },
    "type": "metadata",
  },
]
`;

exports[`parameters > polymorphism > should merge allOf schemas together 1`] = `
[
  {
    "label": "Body Params",
    "schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "properties": {
        "amount": {
          "type": "string",
        },
        "token": {
          "properties": {
            "data": {
              "properties": {
                "decimals": {
                  "examples": [
                    18,
                  ],
                  "type": "integer",
                },
                "token_address": {
                  "type": "string",
                },
                "token_id": {
                  "examples": [
                    "200",
                  ],
                  "type": "string",
                },
              },
              "type": "object",
              "x-readme-ref-name": "core.TokenData",
            },
            "type": {
              "type": "string",
            },
          },
          "type": "object",
          "x-readme-ref-name": "core.Token",
        },
        "user": {
          "type": "string",
        },
      },
      "required": [
        "amount",
        "token",
        "user",
      ],
      "type": "object",
      "x-readme-ref-name": "api.WithdrawalRequest",
    },
    "type": "body",
  },
]
`;

exports[`parameters > should convert parameters to JSON schema 1`] = `
[
  {
    "label": "Path Params",
    "schema": {
      "properties": {
        "petId": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "description": "Pet id to delete",
          "format": "int64",
          "maximum": 9223372036854776000,
          "minimum": -9223372036854776000,
          "type": "integer",
        },
      },
      "required": [
        "petId",
      ],
      "type": "object",
    },
    "type": "path",
  },
  {
    "label": "Headers",
    "schema": {
      "properties": {
        "api_key": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "string",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`polymorphism / discriminators > should retain discriminator \`mapping\` refs when present 1`] = `
[
  {
    "label": "Body Params",
    "schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "components": {
        "schemas": {
          "OptionOneNoDisc": {
            "properties": {
              "discrim": {
                "type": "string",
              },
              "optionone": {
                "type": "number",
              },
            },
            "required": [
              "discrim",
            ],
            "type": "object",
            "x-readme-ref-name": "OptionOneNoDisc",
          },
          "OptionTwoNoDisc": {
            "properties": {
              "discrim": {
                "type": "string",
              },
              "optiontwo": {
                "type": "string",
              },
            },
            "required": [
              "discrim",
            ],
            "type": "object",
            "x-readme-ref-name": "OptionTwoNoDisc",
          },
        },
      },
      "discriminator": {
        "mapping": {
          "Option One": "#/components/schemas/OptionOneNoDisc",
          "Option Two": "#/components/schemas/OptionTwoNoDisc",
        },
        "propertyName": "discrim",
      },
      "oneOf": [
        {
          "properties": {
            "discrim": {
              "type": "string",
            },
            "optionone": {
              "type": "number",
            },
          },
          "required": [
            "discrim",
          ],
          "type": "object",
          "x-readme-ref-name": "OptionOneNoDisc",
        },
        {
          "properties": {
            "discrim": {
              "type": "string",
            },
            "optiontwo": {
              "type": "string",
            },
          },
          "required": [
            "discrim",
          ],
          "type": "object",
          "x-readme-ref-name": "OptionTwoNoDisc",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`request bodies > should convert request bodies to JSON schema > application/json 1`] = `
[
  {
    "description": "Pet object that needs to be added to the store",
    "label": "Body Params",
    "schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "properties": {
        "category": {
          "properties": {
            "id": {
              "format": "int64",
              "maximum": 9223372036854776000,
              "minimum": -9223372036854776000,
              "type": "integer",
            },
            "name": {
              "type": "string",
            },
          },
          "type": "object",
          "x-readme-ref-name": "Category",
        },
        "id": {
          "default": 40,
          "examples": [
            25,
          ],
          "format": "int64",
          "maximum": 9223372036854776000,
          "minimum": -9223372036854776000,
          "readOnly": true,
          "type": "integer",
        },
        "name": {
          "examples": [
            "doggie",
          ],
          "type": "string",
        },
        "photoUrls": {
          "items": {
            "examples": [
              "https://example.com/photo.png",
            ],
            "type": "string",
          },
          "type": "array",
        },
        "status": {
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold",
          ],
          "type": "string",
        },
        "tags": {
          "items": {
            "properties": {
              "id": {
                "format": "int64",
                "maximum": 9223372036854776000,
                "minimum": -9223372036854776000,
                "type": "integer",
              },
              "name": {
                "type": "string",
              },
            },
            "type": "object",
            "x-readme-ref-name": "Tag",
          },
          "type": "array",
        },
      },
      "required": [
        "name",
        "photoUrls",
      ],
      "type": "object",
      "x-readme-ref-name": "Pet",
    },
    "type": "body",
  },
]
`;

exports[`request bodies > should convert request bodies to JSON schema > application/x-www-form-urlencoded 1`] = `
[
  {
    "label": "Path Params",
    "schema": {
      "properties": {
        "petId": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "description": "ID of pet that needs to be updated",
          "format": "int64",
          "maximum": 9223372036854776000,
          "minimum": -9223372036854776000,
          "type": "integer",
        },
      },
      "required": [
        "petId",
      ],
      "type": "object",
    },
    "type": "path",
  },
  {
    "label": "Form Data",
    "schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "properties": {
        "name": {
          "description": "Updated name of the pet",
          "type": "string",
        },
        "status": {
          "description": "Updated status of the pet",
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "formData",
  },
]
`;

exports[`type sorting > should return with a json schema for each parameter type (body instead of formData) 1`] = `
[
  {
    "label": "Path Params",
    "schema": {
      "properties": {
        "path parameter": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "string",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "path",
  },
  {
    "label": "Query Params",
    "schema": {
      "properties": {
        "query parameter": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "string",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "query",
  },
  {
    "description": "Body description",
    "label": "Body Params",
    "schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "properties": {
        "a": {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
  {
    "label": "Cookie Params",
    "schema": {
      "properties": {
        "cookie parameter": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "string",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "cookie",
  },
  {
    "label": "Headers",
    "schema": {
      "properties": {
        "header parameter": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "string",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`type sorting > should return with a json schema for each parameter type (formData instead of body) 1`] = `
[
  {
    "label": "Path Params",
    "schema": {
      "properties": {
        "path parameter": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "string",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "path",
  },
  {
    "label": "Query Params",
    "schema": {
      "properties": {
        "query parameter": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "string",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "query",
  },
  {
    "label": "Cookie Params",
    "schema": {
      "properties": {
        "cookie parameter": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "string",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "cookie",
  },
  {
    "description": "Body description",
    "label": "Form Data",
    "schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "properties": {
        "a": {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "formData",
  },
  {
    "label": "Headers",
    "schema": {
      "properties": {
        "header parameter": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "string",
        },
      },
      "required": [],
      "type": "object",
    },
    "type": "header",
  },
]
`;
