// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`oas-to-snippet > supported languages > backwards compatibiltiy > should still support \`curl\` as the supplied language 1`] = `
"curl --request GET \\\\
     --url 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark' \\\\
     --header 'accept: application/json'"
`;

exports[`oas-to-snippet > supported languages > backwards compatibiltiy > should still support \`node-simple\` as the supplied language 1`] = `
"import sdk from '@api/developers';

sdk.loginUser({username: 'woof', password: 'barkbarkbark'})
  .then(({ data }) => console.log(data))
  .catch(err => console.error(err));"
`;

exports[`oas-to-snippet > supported languages > c > should generate code for the default target 1`] = `
"CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \\"POST\\");
curl_easy_setopt(hnd, CURLOPT_WRITEDATA, stdout);
curl_easy_setopt(hnd, CURLOPT_URL, \\"http://petstore.swagger.io/v2/pet\\");

struct curl_slist *headers = NULL;
headers = curl_slist_append(headers, \\"content-type: application/json\\");
curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \\"{\\\\\\"name\\\\\\":\\\\\\"buster\\\\\\"}\\");

CURLcode ret = curl_easy_perform(hnd);"
`;

exports[`oas-to-snippet > supported languages > c > targets > libcurl > should support snippet generation 1`] = `
"CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \\"GET\\");
curl_easy_setopt(hnd, CURLOPT_WRITEDATA, stdout);
curl_easy_setopt(hnd, CURLOPT_URL, \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\");

struct curl_slist *headers = NULL;
headers = curl_slist_append(headers, \\"accept: application/json\\");
curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

CURLcode ret = curl_easy_perform(hnd);"
`;

exports[`oas-to-snippet > supported languages > clojure > should generate code for the default target 1`] = `
"(require '[clj-http.client :as client])

(client/post \\"http://petstore.swagger.io/v2/pet\\" {:content-type :json
                                                  :form-params {:name \\"buster\\"}})"
`;

exports[`oas-to-snippet > supported languages > clojure > targets > clj_http > should support snippet generation 1`] = `
"(require '[clj-http.client :as client])

(client/get \\"http://petstore.swagger.io/v2/user/login\\" {:query-params {:username \\"woof\\"
                                                                       :password \\"barkbarkbark\\"}
                                                        :accept :json})"
`;

exports[`oas-to-snippet > supported languages > cplusplus > should generate code for the default target 1`] = `
"CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \\"POST\\");
curl_easy_setopt(hnd, CURLOPT_WRITEDATA, stdout);
curl_easy_setopt(hnd, CURLOPT_URL, \\"http://petstore.swagger.io/v2/pet\\");

struct curl_slist *headers = NULL;
headers = curl_slist_append(headers, \\"content-type: application/json\\");
curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \\"{\\\\\\"name\\\\\\":\\\\\\"buster\\\\\\"}\\");

CURLcode ret = curl_easy_perform(hnd);"
`;

exports[`oas-to-snippet > supported languages > cplusplus > targets > libcurl > should support snippet generation 1`] = `
"CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \\"GET\\");
curl_easy_setopt(hnd, CURLOPT_WRITEDATA, stdout);
curl_easy_setopt(hnd, CURLOPT_URL, \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\");

struct curl_slist *headers = NULL;
headers = curl_slist_append(headers, \\"accept: application/json\\");
curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

CURLcode ret = curl_easy_perform(hnd);"
`;

exports[`oas-to-snippet > supported languages > csharp > should generate code for the default target 1`] = `
"using RestSharp;


var options = new RestClientOptions(\\"http://petstore.swagger.io/v2/pet\\");
var client = new RestClient(options);
var request = new RestRequest(\\"\\");
request.AddJsonBody(\\"{\\\\\\"name\\\\\\":\\\\\\"buster\\\\\\"}\\", false);
var response = await client.PostAsync(request);

Console.WriteLine(\\"{0}\\", response.Content);
"
`;

exports[`oas-to-snippet > supported languages > csharp > targets > httpclient > should support snippet generation 1`] = `
"using System.Net.Http.Headers;
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\"),
    Headers =
    {
        { \\"accept\\", \\"application/json\\" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}"
`;

exports[`oas-to-snippet > supported languages > csharp > targets > restsharp > should support snippet generation 1`] = `
"using RestSharp;


var options = new RestClientOptions(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\");
var client = new RestClient(options);
var request = new RestRequest(\\"\\");
request.AddHeader(\\"accept\\", \\"application/json\\");
var response = await client.GetAsync(request);

Console.WriteLine(\\"{0}\\", response.Content);
"
`;

exports[`oas-to-snippet > supported languages > go > should generate code for the default target 1`] = `
"package main

import (
	\\"fmt\\"
	\\"strings\\"
	\\"net/http\\"
	\\"io\\"
)

func main() {

	url := \\"http://petstore.swagger.io/v2/pet\\"

	payload := strings.NewReader(\\"{\\\\\\"name\\\\\\":\\\\\\"buster\\\\\\"}\\")

	req, _ := http.NewRequest(\\"POST\\", url, payload)

	req.Header.Add(\\"content-type\\", \\"application/json\\")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)

	fmt.Println(string(body))

}"
`;

exports[`oas-to-snippet > supported languages > go > targets > native > should support snippet generation 1`] = `
"package main

import (
	\\"fmt\\"
	\\"net/http\\"
	\\"io\\"
)

func main() {

	url := \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\"

	req, _ := http.NewRequest(\\"GET\\", url, nil)

	req.Header.Add(\\"accept\\", \\"application/json\\")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)

	fmt.Println(string(body))

}"
`;

exports[`oas-to-snippet > supported languages > http > should generate code for the default target 1`] = `
"POST /v2/pet HTTP/1.1
Content-Type: application/json
Host: petstore.swagger.io
Content-Length: 17

{\\"name\\":\\"buster\\"}"
`;

exports[`oas-to-snippet > supported languages > http > targets > http1.1 > should support snippet generation 1`] = `
"GET /v2/user/login?username=woof&password=barkbarkbark HTTP/1.1
Accept: application/json
Host: petstore.swagger.io

"
`;

exports[`oas-to-snippet > supported languages > java > should generate code for the default target 1`] = `
"OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse(\\"application/json\\");
RequestBody body = RequestBody.create(mediaType, \\"{\\\\\\"name\\\\\\":\\\\\\"buster\\\\\\"}\\");
Request request = new Request.Builder()
  .url(\\"http://petstore.swagger.io/v2/pet\\")
  .post(body)
  .addHeader(\\"content-type\\", \\"application/json\\")
  .build();

Response response = client.newCall(request).execute();"
`;

exports[`oas-to-snippet > supported languages > java > targets > asynchttp > should support snippet generation 1`] = `
"AsyncHttpClient client = new DefaultAsyncHttpClient();
client.prepare(\\"GET\\", \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")
  .setHeader(\\"accept\\", \\"application/json\\")
  .execute()
  .toCompletableFuture()
  .thenAccept(System.out::println)
  .join();

client.close();"
`;

exports[`oas-to-snippet > supported languages > java > targets > nethttp > should support snippet generation 1`] = `
"HttpRequest request = HttpRequest.newBuilder()
    .uri(URI.create(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\"))
    .header(\\"accept\\", \\"application/json\\")
    .method(\\"GET\\", HttpRequest.BodyPublishers.noBody())
    .build();
HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
System.out.println(response.body());"
`;

exports[`oas-to-snippet > supported languages > java > targets > okhttp > should support snippet generation 1`] = `
"OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")
  .get()
  .addHeader(\\"accept\\", \\"application/json\\")
  .build();

Response response = client.newCall(request).execute();"
`;

exports[`oas-to-snippet > supported languages > java > targets > unirest > should support snippet generation 1`] = `
"HttpResponse<String> response = Unirest.get(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")
  .header(\\"accept\\", \\"application/json\\")
  .asString();"
`;

exports[`oas-to-snippet > supported languages > javascript > should generate code for the default target 1`] = `
"const options = {
  method: 'POST',
  headers: {'content-type': 'application/json'},
  body: JSON.stringify({name: 'buster'})
};

fetch('http://petstore.swagger.io/v2/pet', options)
  .then(response => response.json())
  .then(response => console.log(response))
  .catch(err => console.error(err));"
`;

exports[`oas-to-snippet > supported languages > javascript > targets > axios > should support snippet generation 1`] = `
"import axios from 'axios';

const options = {
  method: 'GET',
  url: 'http://petstore.swagger.io/v2/user/login',
  params: {username: 'woof', password: 'barkbarkbark'},
  headers: {accept: 'application/json'}
};

axios
  .request(options)
  .then(function (response) {
    console.log(response.data);
  })
  .catch(function (error) {
    console.error(error);
  });"
`;

exports[`oas-to-snippet > supported languages > javascript > targets > fetch > should support snippet generation 1`] = `
"const options = {method: 'GET', headers: {accept: 'application/json'}};

fetch('http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark', options)
  .then(response => response.json())
  .then(response => console.log(response))
  .catch(err => console.error(err));"
`;

exports[`oas-to-snippet > supported languages > javascript > targets > jquery > should support snippet generation 1`] = `
"const settings = {
  async: true,
  crossDomain: true,
  url: 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark',
  method: 'GET',
  headers: {
    accept: 'application/json'
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});"
`;

exports[`oas-to-snippet > supported languages > javascript > targets > xhr > should support snippet generation 1`] = `
"const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener('readystatechange', function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open('GET', 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark');
xhr.setRequestHeader('accept', 'application/json');

xhr.send(data);"
`;

exports[`oas-to-snippet > supported languages > json > should generate code for the default target 1`] = `
"{
  \\"name\\": \\"buster\\"
}"
`;

exports[`oas-to-snippet > supported languages > json > targets > native > should support snippet generation 1`] = `"No JSON body"`;

exports[`oas-to-snippet > supported languages > kotlin > should generate code for the default target 1`] = `
"val client = OkHttpClient()

val mediaType = MediaType.parse(\\"application/json\\")
val body = RequestBody.create(mediaType, \\"{\\\\\\"name\\\\\\":\\\\\\"buster\\\\\\"}\\")
val request = Request.Builder()
  .url(\\"http://petstore.swagger.io/v2/pet\\")
  .post(body)
  .addHeader(\\"content-type\\", \\"application/json\\")
  .build()

val response = client.newCall(request).execute()"
`;

exports[`oas-to-snippet > supported languages > kotlin > targets > okhttp > should support snippet generation 1`] = `
"val client = OkHttpClient()

val request = Request.Builder()
  .url(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")
  .get()
  .addHeader(\\"accept\\", \\"application/json\\")
  .build()

val response = client.newCall(request).execute()"
`;

exports[`oas-to-snippet > supported languages > node > should generate code for the default target 1`] = `
"const fetch = require('node-fetch');

const url = 'http://petstore.swagger.io/v2/pet';
const options = {
  method: 'POST',
  headers: {'content-type': 'application/json'},
  body: JSON.stringify({name: 'buster'})
};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));"
`;

exports[`oas-to-snippet > supported languages > node > targets > api > should support custom variable names 1`] = `
"import developers from '@api/developers';

developers.loginUser({username: 'woof', password: 'barkbarkbark'})
  .then(({ data }) => console.log(data))
  .catch(err => console.error(err));"
`;

exports[`oas-to-snippet > supported languages > node > targets > api > should support snippet generation 1`] = `
"import sdk from '@api/developers';

sdk.loginUser({username: 'woof', password: 'barkbarkbark'})
  .then(({ data }) => console.log(data))
  .catch(err => console.error(err));"
`;

exports[`oas-to-snippet > supported languages > node > targets > axios > should support snippet generation 1`] = `
"const axios = require('axios');

const options = {
  method: 'GET',
  url: 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark',
  headers: {accept: 'application/json'}
};

axios
  .request(options)
  .then(function (response) {
    console.log(response.data);
  })
  .catch(function (error) {
    console.error(error);
  });"
`;

exports[`oas-to-snippet > supported languages > node > targets > fetch > should support snippet generation 1`] = `
"const fetch = require('node-fetch');

const url = 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark';
const options = {method: 'GET', headers: {accept: 'application/json'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));"
`;

exports[`oas-to-snippet > supported languages > node > targets > native > should support snippet generation 1`] = `
"const http = require('http');

const options = {
  method: 'GET',
  hostname: 'petstore.swagger.io',
  port: null,
  path: '/v2/user/login?username=woof&password=barkbarkbark',
  headers: {
    accept: 'application/json'
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on('data', function (chunk) {
    chunks.push(chunk);
  });

  res.on('end', function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();"
`;

exports[`oas-to-snippet > supported languages > node > targets > request > should support snippet generation 1`] = `
"const request = require('request');

const options = {
  method: 'GET',
  url: 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark',
  headers: {accept: 'application/json'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});"
`;

exports[`oas-to-snippet > supported languages > objectivec > should generate code for the default target 1`] = `
"#import <Foundation/Foundation.h>

NSDictionary *headers = @{ @\\"content-type\\": @\\"application/json\\" };
NSDictionary *parameters = @{ @\\"name\\": @\\"buster\\" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\\"http://petstore.swagger.io/v2/pet\\"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@\\"POST\\"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@\\"%@\\", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@\\"%@\\", httpResponse);
                                                }
                                            }];
[dataTask resume];"
`;

exports[`oas-to-snippet > supported languages > objectivec > targets > nsurlsession > should support snippet generation 1`] = `
"#import <Foundation/Foundation.h>

NSDictionary *headers = @{ @\\"accept\\": @\\"application/json\\" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@\\"GET\\"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@\\"%@\\", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@\\"%@\\", httpResponse);
                                                }
                                            }];
[dataTask resume];"
`;

exports[`oas-to-snippet > supported languages > ocaml > should generate code for the default target 1`] = `
"open Cohttp_lwt_unix
open Cohttp
open Lwt

let uri = Uri.of_string \\"http://petstore.swagger.io/v2/pet\\" in
let headers = Header.add (Header.init ()) \\"content-type\\" \\"application/json\\" in
let body = Cohttp_lwt_body.of_string \\"{\\\\\\"name\\\\\\":\\\\\\"buster\\\\\\"}\\" in

Client.call ~headers ~body \`POST uri
>>= fun (res, body_stream) ->
  (* Do stuff with the result *)"
`;

exports[`oas-to-snippet > supported languages > ocaml > targets > cohttp > should support snippet generation 1`] = `
"open Cohttp_lwt_unix
open Cohttp
open Lwt

let uri = Uri.of_string \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\" in
let headers = Header.add (Header.init ()) \\"accept\\" \\"application/json\\" in

Client.call ~headers \`GET uri
>>= fun (res, body_stream) ->
  (* Do stuff with the result *)"
`;

exports[`oas-to-snippet > supported languages > php > should generate code for the default target 1`] = `
"<?php
require_once('vendor/autoload.php');

$client = new \\\\GuzzleHttp\\\\Client();

$response = $client->request('POST', 'http://petstore.swagger.io/v2/pet', [
  'body' => '{\\"name\\":\\"buster\\"}',
  'headers' => [
    'content-type' => 'application/json',
  ],
]);

echo $response->getBody();"
`;

exports[`oas-to-snippet > supported languages > php > targets > curl > should support snippet generation 1`] = `
"<?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL => \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => \\"\\",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => \\"GET\\",
  CURLOPT_HTTPHEADER => [
    \\"accept: application/json\\"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo \\"cURL Error #:\\" . $err;
} else {
  echo $response;
}"
`;

exports[`oas-to-snippet > supported languages > php > targets > guzzle > should support snippet generation 1`] = `
"<?php
require_once('vendor/autoload.php');

$client = new \\\\GuzzleHttp\\\\Client();

$response = $client->request('GET', 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark', [
  'headers' => [
    'accept' => 'application/json',
  ],
]);

echo $response->getBody();"
`;

exports[`oas-to-snippet > supported languages > powershell > should generate code for the default target 1`] = `
"$headers=@{}
$headers.Add(\\"content-type\\", \\"application/json\\")
$response = Invoke-WebRequest -Uri 'http://petstore.swagger.io/v2/pet' -Method POST -Headers $headers -ContentType 'application/json' -Body '{\\"name\\":\\"buster\\"}'"
`;

exports[`oas-to-snippet > supported languages > powershell > targets > restmethod > should support snippet generation 1`] = `
"$headers=@{}
$headers.Add(\\"accept\\", \\"application/json\\")
$response = Invoke-RestMethod -Uri 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark' -Method GET -Headers $headers"
`;

exports[`oas-to-snippet > supported languages > powershell > targets > webrequest > should support snippet generation 1`] = `
"$headers=@{}
$headers.Add(\\"accept\\", \\"application/json\\")
$response = Invoke-WebRequest -Uri 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark' -Method GET -Headers $headers"
`;

exports[`oas-to-snippet > supported languages > python > should generate code for the default target 1`] = `
"import requests

url = \\"http://petstore.swagger.io/v2/pet\\"

payload = { \\"name\\": \\"buster\\" }
headers = {\\"content-type\\": \\"application/json\\"}

response = requests.post(url, json=payload, headers=headers)

print(response.text)"
`;

exports[`oas-to-snippet > supported languages > python > targets > requests > should support snippet generation 1`] = `
"import requests

url = \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\"

headers = {\\"accept\\": \\"application/json\\"}

response = requests.get(url, headers=headers)

print(response.text)"
`;

exports[`oas-to-snippet > supported languages > r > should generate code for the default target 1`] = `
"library(httr)

url <- \\"http://petstore.swagger.io/v2/pet\\"

payload <- \\"{\\\\\\"name\\\\\\":\\\\\\"buster\\\\\\"}\\"

encode <- \\"json\\"

response <- VERB(\\"POST\\", url, body = payload, content_type(\\"application/json\\"), encode = encode)

content(response, \\"text\\")"
`;

exports[`oas-to-snippet > supported languages > r > targets > httr > should support snippet generation 1`] = `
"library(httr)

url <- \\"http://petstore.swagger.io/v2/user/login\\"

queryString <- list(
  username = \\"woof\\",
  password = \\"barkbarkbark\\"
)

response <- VERB(\\"GET\\", url, query = queryString, content_type(\\"application/octet-stream\\"), accept(\\"application/json\\"))

content(response, \\"text\\")"
`;

exports[`oas-to-snippet > supported languages > ruby > should generate code for the default target 1`] = `
"require 'uri'
require 'net/http'

url = URI(\\"http://petstore.swagger.io/v2/pet\\")

http = Net::HTTP.new(url.host, url.port)

request = Net::HTTP::Post.new(url)
request[\\"content-type\\"] = 'application/json'
request.body = \\"{\\\\\\"name\\\\\\":\\\\\\"buster\\\\\\"}\\"

response = http.request(request)
puts response.read_body"
`;

exports[`oas-to-snippet > supported languages > ruby > targets > native > should support snippet generation 1`] = `
"require 'uri'
require 'net/http'

url = URI(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")

http = Net::HTTP.new(url.host, url.port)

request = Net::HTTP::Get.new(url)
request[\\"accept\\"] = 'application/json'

response = http.request(request)
puts response.read_body"
`;

exports[`oas-to-snippet > supported languages > shell > should generate code for the default target 1`] = `
"curl --request POST \\\\
     --url http://petstore.swagger.io/v2/pet \\\\
     --header 'content-type: application/json' \\\\
     --data '{\\"name\\":\\"buster\\"}'"
`;

exports[`oas-to-snippet > supported languages > shell > targets > curl > should support snippet generation 1`] = `
"curl --request GET \\\\
     --url 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark' \\\\
     --header 'accept: application/json'"
`;

exports[`oas-to-snippet > supported languages > shell > targets > httpie > should support snippet generation 1`] = `
"http GET 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark' \\\\
  accept:application/json"
`;

exports[`oas-to-snippet > supported languages > swift > should generate code for the default target 1`] = `
"import Foundation

let headers = [\\"content-type\\": \\"application/json\\"]
let parameters = [\\"name\\": \\"buster\\"] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: \\"http://petstore.swagger.io/v2/pet\\")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = \\"POST\\"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in
  if (error != nil) {
    print(error as Any)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()"
`;

exports[`oas-to-snippet > supported languages > swift > targets > nsurlsession > should support snippet generation 1`] = `
"import Foundation

let headers = [\\"accept\\": \\"application/json\\"]

let request = NSMutableURLRequest(url: NSURL(string: \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = \\"GET\\"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in
  if (error != nil) {
    print(error as Any)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()"
`;
