// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`#validate > OpenAPI 3.0 support > should validate a JSON path as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "default": 40,
            "example": 25,
            "format": "int64",
            "readOnly": true,
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "example": "https://example.com/photo.png",
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "default": {
            "description": "successful response",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > OpenAPI 3.0 support > should validate a URL hosting JSON as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "default": 40,
            "example": 25,
            "format": "int64",
            "readOnly": true,
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "example": "https://example.com/photo.png",
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "default": {
            "description": "successful response",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > OpenAPI 3.0 support > should validate a URL hosting YAML as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "default": 40,
            "example": 25,
            "format": "int64",
            "readOnly": true,
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "example": "https://example.com/photo.png",
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "default": {
            "description": "successful response",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > OpenAPI 3.0 support > should validate a YAML path as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "default": 40,
            "example": 25,
            "format": "int64",
            "readOnly": true,
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "example": "https://example.com/photo.png",
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "default": {
            "description": "successful response",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > OpenAPI 3.1 support > should validate a JSON path as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "format": "int64",
            "readOnly": true,
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "default": {
            "description": "successful response",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > OpenAPI 3.1 support > should validate a URL hosting JSON as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "format": "int64",
            "readOnly": true,
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "default": {
            "description": "successful response",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > OpenAPI 3.1 support > should validate a URL hosting YAML as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "format": "int64",
            "readOnly": true,
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "default": {
            "description": "successful response",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > OpenAPI 3.1 support > should validate a YAML path as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "format": "int64",
            "readOnly": true,
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "default": {
            "description": "successful response",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > Postman support > should support converting a Postman collection to OpenAPI (validating it in the process) 1`] = `
{
  "components": {
    "securitySchemes": {
      "apikeyAuth": {
        "scheme": "apikey",
        "type": "http",
      },
      "oauth2Auth": {
        "scheme": "oauth2",
        "type": "http",
      },
    },
  },
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.

Contact Support:
 Email: apiteam@swagger.io",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/v2/pet": {
      "post": {
        "parameters": [
          {
            "example": "application/json",
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "category": {
                    "id": -98206889,
                    "name": "ut",
                  },
                  "name": "doggie",
                  "photoUrls": [
                    "https://example.com/photo.png",
                    "https://example.com/photo.png",
                  ],
                  "status": "available",
                  "tags": [
                    {
                      "id": -66696067,
                      "name": "laboris dolore pariatur qui",
                    },
                    {
                      "id": -22260355,
                      "name": "qui reprehenderit aliqua sint velit",
                    },
                  ],
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "oauth2Auth": [],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "parameters": [
          {
            "example": "application/json",
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "category": {
                    "id": 45108667,
                    "name": "elit",
                  },
                  "name": "doggie",
                  "photoUrls": [
                    "https://example.com/photo.png",
                    "https://example.com/photo.png",
                  ],
                  "status": "sold",
                  "tags": [
                    {
                      "id": -90871361,
                      "name": "tempor ullamco",
                    },
                    {
                      "id": 41541088,
                      "name": "commodo irure in dolor fugiat",
                    },
                  ],
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "404": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "405": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "oauth2Auth": [],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/v2/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "parameters": [
          {
            "example": "application/xml",
            "in": "header",
            "name": "Accept",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) Status values that need to be considered for filter",
            "example": "available",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "category": {
                      "id": -10731015,
                      "name": "consectetur proident",
                    },
                    "id": 25,
                    "name": "doggie",
                    "photoUrls": [
                      "https://example.com/photo.png",
                      "https://example.com/photo.png",
                    ],
                    "status": "pending",
                    "tags": [
                      {
                        "id": -87509155,
                        "name": "dolor nulla Ut",
                      },
                      {
                        "id": -19458248,
                        "name": "elit",
                      },
                    ],
                  },
                  {
                    "category": {
                      "id": 38511362,
                      "name": "a",
                    },
                    "id": 25,
                    "name": "doggie",
                    "photoUrls": [
                      "https://example.com/photo.png",
                      "https://example.com/photo.png",
                    ],
                    "status": "pending",
                    "tags": [
                      {
                        "id": 26246913,
                        "name": "pariatur",
                      },
                      {
                        "id": 65442833,
                        "name": "dolor irure consectetur",
                      },
                    ],
                  },
                ],
                "schema": {
                  "type": "object",
                },
              },
            },
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "application/json",
                  "type": "string",
                },
              },
            },
          },
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "oauth2Auth": [],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/v2/pet/findByTags": {
      "get": {
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "parameters": [
          {
            "example": "application/xml",
            "in": "header",
            "name": "Accept",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) Tags to filter by",
            "example": "enim nostrud consequat",
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "category": {
                      "id": -10731015,
                      "name": "consectetur proident",
                    },
                    "id": 25,
                    "name": "doggie",
                    "photoUrls": [
                      "https://example.com/photo.png",
                      "https://example.com/photo.png",
                    ],
                    "status": "pending",
                    "tags": [
                      {
                        "id": -87509155,
                        "name": "dolor nulla Ut",
                      },
                      {
                        "id": -19458248,
                        "name": "elit",
                      },
                    ],
                  },
                  {
                    "category": {
                      "id": 38511362,
                      "name": "a",
                    },
                    "id": 25,
                    "name": "doggie",
                    "photoUrls": [
                      "https://example.com/photo.png",
                      "https://example.com/photo.png",
                    ],
                    "status": "pending",
                    "tags": [
                      {
                        "id": 26246913,
                        "name": "pariatur",
                      },
                      {
                        "id": 65442833,
                        "name": "dolor irure consectetur",
                      },
                    ],
                  },
                ],
                "schema": {
                  "type": "object",
                },
              },
            },
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "application/json",
                  "type": "string",
                },
              },
            },
          },
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "oauth2Auth": [],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/v2/pet/{petId}": {
      "delete": {
        "parameters": [
          {
            "example": "dolore est",
            "in": "header",
            "name": "api_key",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) Pet id to delete",
            "example": "-53776022",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "type": "number",
            },
          },
        ],
        "responses": {
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "404": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "oauth2Auth": [],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet > {pet Id}",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "parameters": [
          {
            "example": "application/xml",
            "in": "header",
            "name": "Accept",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) ID of pet to return",
            "example": "-53776022",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "type": "number",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "category": {
                    "id": -66648423,
                    "name": "sint proident voluptate nostrud",
                  },
                  "id": 25,
                  "name": "doggie",
                  "photoUrls": [
                    "https://example.com/photo.png",
                    "https://example.com/photo.png",
                  ],
                  "status": "available",
                  "tags": [
                    {
                      "id": -36713801,
                      "name": "cupidatat laboris",
                    },
                    {
                      "id": 88956444,
                      "name": "sed",
                    },
                  ],
                },
                "schema": {
                  "type": "object",
                },
              },
            },
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "application/json",
                  "type": "string",
                },
              },
            },
          },
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "404": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "500": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "apikeyAuth": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet > {pet Id}",
        ],
      },
      "post": {
        "parameters": [
          {
            "example": "application/x-www-form-urlencoded",
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) ID of pet that needs to be updated",
            "example": "-53776022",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "type": "number",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "example": "dolore magna",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "example": "et incididunt",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "oauth2Auth": [],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet > {pet Id}",
        ],
      },
    },
    "/v2/pet/{petId}/uploadImage": {
      "post": {
        "parameters": [
          {
            "example": "multipart/form-data",
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string",
            },
          },
          {
            "example": "application/json",
            "in": "header",
            "name": "Accept",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) ID of pet to update",
            "example": "-53776022",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "type": "number",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "example": "voluptate cillum",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "code": -15164975,
                  "message": "ut Lorem dolor officia incididunt",
                  "type": "Excepteur",
                },
                "schema": {
                  "type": "object",
                },
              },
            },
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "application/json",
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "oauth2Auth": [],
          },
        ],
        "summary": "Uploads an image",
        "tags": [
          "pet > {pet Id}",
        ],
      },
    },
    "/v2/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "parameters": [
          {
            "example": "application/json",
            "in": "header",
            "name": "Accept",
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "dolor_4": -59651882,
                  "dolor__10": 76938793,
                },
                "schema": {
                  "type": "object",
                },
              },
            },
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "application/json",
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "apikeyAuth": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/v2/store/order": {
      "post": {
        "parameters": [
          {
            "example": "application/json",
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string",
            },
          },
          {
            "example": "application/xml",
            "in": "header",
            "name": "Accept",
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "complete": false,
                  "id": -15329310,
                  "petId": -50620843,
                  "quantity": 78361352,
                  "shipDate": "2018-08-08T02:36:45.934Z",
                  "status": "delivered",
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "complete": false,
                  "id": -15329310,
                  "petId": -50620843,
                  "quantity": 78361352,
                  "shipDate": "2018-08-08T02:36:45.934Z",
                  "status": "delivered",
                },
                "schema": {
                  "type": "object",
                },
              },
            },
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "application/json",
                  "type": "string",
                },
              },
            },
          },
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store > order",
        ],
      },
    },
    "/v2/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "parameters": [
          {
            "description": "(Required) ID of the order that needs to be deleted",
            "example": "32526146",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "404": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store > order > {order Id}",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "parameters": [
          {
            "example": "application/xml",
            "in": "header",
            "name": "Accept",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) ID of pet that needs to be fetched",
            "example": "7",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "complete": false,
                  "id": -15329310,
                  "petId": -50620843,
                  "quantity": 78361352,
                  "shipDate": "2018-08-08T02:36:45.934Z",
                  "status": "delivered",
                },
                "schema": {
                  "type": "object",
                },
              },
            },
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "application/json",
                  "type": "string",
                },
              },
            },
          },
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "404": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store > order > {order Id}",
        ],
      },
    },
    "/v2/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "parameters": [
          {
            "example": "application/json",
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "email": "nostrud Ut",
                  "firstName": "occaecat dolor in dolore",
                  "id": -70409270,
                  "lastName": "laborum sit ullamco",
                  "password": "officia occaecat enim l",
                  "phone": "in elit officia sint",
                  "userStatus": 86291576,
                  "username": "do ea nisi",
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "500": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/v2/user/createWithArray": {
      "post": {
        "parameters": [
          {
            "example": "application/json",
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": [
                  {
                    "email": "esse in nostrud",
                    "firstName": "ipsum enim",
                    "id": -95496632,
                    "lastName": "sit incididunt quis su",
                    "password": "dolore",
                    "phone": "ea tempor sed eiusmod",
                    "userStatus": 23456761,
                    "username": "reprehenderit Duis",
                  },
                  {
                    "email": "ea qui",
                    "firstName": "consectetur fugiat",
                    "id": -17610454,
                    "lastName": "est consectet",
                    "password": "dolor aliquip",
                    "phone": "nulla eu veniam",
                    "userStatus": -56036685,
                    "username": "occaecat in laboris voluptate",
                  },
                ],
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "500": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/v2/user/createWithList": {
      "post": {
        "parameters": [
          {
            "example": "application/json",
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": [
                  {
                    "email": "culpa voluptate laborum ut",
                    "firstName": "adipisic",
                    "id": -17453134,
                    "lastName": "ea nisi ut anim",
                    "password": "veniam id enim voluptate",
                    "phone": "enim sed",
                    "userStatus": 31329378,
                    "username": "est veniam proident",
                  },
                  {
                    "email": "minim qui laborum in",
                    "firstName": "reprehenderit do aliquip",
                    "id": -97425969,
                    "lastName": "anim mollit",
                    "password": "exercitation quis",
                    "phone": "irure",
                    "userStatus": -62781043,
                    "username": "velit sint ea ad reprehend",
                  },
                ],
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "500": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/v2/user/login": {
      "get": {
        "parameters": [
          {
            "example": "application/xml",
            "in": "header",
            "name": "Accept",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) The user name for login",
            "example": "dolore est",
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) The password for login in clear text",
            "example": "dolore est",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": "dolore est",
                "schema": {
                  "type": "object",
                },
              },
            },
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "application/json",
                  "type": "string",
                },
              },
              "X-Expires-After": {
                "schema": {
                  "example": "1966-01-28T06:32:02.771Z",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "schema": {
                  "example": "-71676539",
                  "type": "number",
                },
              },
            },
          },
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/v2/user/logout": {
      "get": {
        "responses": {
          "500": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/v2/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "parameters": [
          {
            "description": "(Required) The name that needs to be deleted",
            "example": "dolore est",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "404": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Delete user",
        "tags": [
          "user > {username}",
        ],
      },
      "get": {
        "parameters": [
          {
            "example": "application/xml",
            "in": "header",
            "name": "Accept",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) The name that needs to be fetched. Use user1 for testing. ",
            "example": "dolore est",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "email": "nostrud Ut",
                  "firstName": "occaecat dolor in dolore",
                  "id": -70409270,
                  "lastName": "laborum sit ullamco",
                  "password": "officia occaecat enim l",
                  "phone": "in elit officia sint",
                  "userStatus": 86291576,
                  "username": "do ea nisi",
                },
                "schema": {
                  "type": "object",
                },
              },
            },
            "description": "OK",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "application/json",
                  "type": "string",
                },
              },
            },
          },
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "404": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user > {username}",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "parameters": [
          {
            "example": "application/json",
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "(Required) name that need to be updated",
            "example": "dolore est",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "email": "nostrud Ut",
                  "firstName": "occaecat dolor in dolore",
                  "id": -70409270,
                  "lastName": "laborum sit ullamco",
                  "password": "officia occaecat enim l",
                  "phone": "in elit officia sint",
                  "userStatus": 86291576,
                  "username": "do ea nisi",
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "400": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
          "404": {
            "content": {
              "text/plain": {
                "example": "",
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "schema": {
                  "example": "text/plain",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Updated user",
        "tags": [
          "user > {username}",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io",
    },
  ],
  "tags": [
    {
      "name": "pet",
    },
    {
      "name": "pet > {pet Id}",
    },
    {
      "name": "store",
    },
    {
      "name": "store > order",
    },
    {
      "name": "store > order > {order Id}",
    },
    {
      "name": "user",
    },
    {
      "name": "user > {username}",
    },
  ],
}
`;

exports[`#validate > Swagger 2.0 support > should validate a JSON path as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > Swagger 2.0 support > should validate a URL hosting JSON as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > Swagger 2.0 support > should validate a URL hosting YAML as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > Swagger 2.0 support > should validate a YAML path as expected 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "type": "boolean",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "petId": {
            "format": "int64",
            "type": "integer",
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
          },
          "shipDate": {
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "example": "doggie",
            "type": "string",
          },
          "photoUrls": {
            "items": {
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "name": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
          },
          "firstName": {
            "type": "string",
          },
          "id": {
            "format": "int64",
            "type": "integer",
          },
          "lastName": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "phone": {
            "type": "string",
          },
          "userStatus": {
            "description": "User Status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
    },
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": true,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io",
      },
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io",
      },
      "name": "user",
    },
  ],
}
`;

exports[`#validate > should error out, and show all errors, when a definition has lots of problems 1`] = `
[SyntaxError: OpenAPI schema validation failed.

REQUIRED must have required property 'url'

   7 |   },
   8 |   "servers": [
>  9 |     {
     |     ^ ☹️  url is missing here!
  10 |       "urll": "http://petstore.swagger.io/v2"
  11 |     }
  12 |   ],

ADDITIONAL PROPERTY must NOT have additional properties

  24 |     "/pet/findByStatus": {
  25 |       "get": {
> 26 |         "tagss": [
     |         ^^^^^^^ 😲  tagss is not expected to be here!
  27 |           "pet"
  28 |         ],
  29 |         "summary": "Finds Pets by status",]
`;
